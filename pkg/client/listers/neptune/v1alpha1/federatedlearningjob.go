// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/edgeai-neptune/neptune/pkg/apis/neptune/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederatedLearningJobLister helps list FederatedLearningJobs.
// All objects returned here must be treated as read-only.
type FederatedLearningJobLister interface {
	// List lists all FederatedLearningJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedLearningJob, err error)
	// FederatedLearningJobs returns an object that can list and get FederatedLearningJobs.
	FederatedLearningJobs(namespace string) FederatedLearningJobNamespaceLister
	FederatedLearningJobListerExpansion
}

// federatedLearningJobLister implements the FederatedLearningJobLister interface.
type federatedLearningJobLister struct {
	indexer cache.Indexer
}

// NewFederatedLearningJobLister returns a new FederatedLearningJobLister.
func NewFederatedLearningJobLister(indexer cache.Indexer) FederatedLearningJobLister {
	return &federatedLearningJobLister{indexer: indexer}
}

// List lists all FederatedLearningJobs in the indexer.
func (s *federatedLearningJobLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedLearningJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedLearningJob))
	})
	return ret, err
}

// FederatedLearningJobs returns an object that can list and get FederatedLearningJobs.
func (s *federatedLearningJobLister) FederatedLearningJobs(namespace string) FederatedLearningJobNamespaceLister {
	return federatedLearningJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedLearningJobNamespaceLister helps list and get FederatedLearningJobs.
// All objects returned here must be treated as read-only.
type FederatedLearningJobNamespaceLister interface {
	// List lists all FederatedLearningJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedLearningJob, err error)
	// Get retrieves the FederatedLearningJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FederatedLearningJob, error)
	FederatedLearningJobNamespaceListerExpansion
}

// federatedLearningJobNamespaceLister implements the FederatedLearningJobNamespaceLister
// interface.
type federatedLearningJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedLearningJobs in the indexer for a given namespace.
func (s federatedLearningJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedLearningJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedLearningJob))
	})
	return ret, err
}

// Get retrieves the FederatedLearningJob from the indexer for a given namespace and name.
func (s federatedLearningJobNamespaceLister) Get(name string) (*v1alpha1.FederatedLearningJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("federatedlearningjob"), name)
	}
	return obj.(*v1alpha1.FederatedLearningJob), nil
}
